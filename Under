import laspy
import numpy as np
from sklearn.cluster import DBSCAN
import os

def dbscan_under_correction(las_path: str, bbox: tuple, eps: float = 1.5, min_samples: int = 10) -> tuple:
    las = laspy.read(las_path)

    min_x, min_y, max_x, max_y = bbox
    # ​​Create a selection mask to select only the points within the bounding box
    mask = (las.x >= min_x) & (las.x <= max_x) & (las.y >= min_y) & (las.y <= max_y)
    region_las = las[mask]
    
    # Feature Matrix - XY坐
    features = np.column_stack((region_las.x, region_las.y))
    
    dbscan = DBSCAN(
        eps=eps,             
        min_samples=min_samples, 
        metric='euclidean', 
        algorithm='auto',  
        n_jobs=-1            
    )
    
    # DBSCAN Clustering
    labels = dbscan.fit_predict(features)
    unique_labels = np.unique(labels)
    n_clusters = len(unique_labels) - (1 if -1 in unique_labels else 0)
    noise_points = np.sum(labels == -1)
    
    print(f"DBSCAN Clustering finash: {n_clusters}，{noise_points}")
    
    return labels, region_las


def visualize_dbscan_clusters(points, labels):
    import matplotlib.pyplot as plt
    
    plt.figure(figsize=(10, 8))
    
    unique_labels = np.unique(labels)
    colors = [plt.cm.Spectral(each) for each in np.linspace(0, 1, len(unique_labels))]
    
    for k, col in zip(unique_labels, colors):
        if k == -1:
            col = [0, 0, 0, 1]
        
        cluster_mask = (labels == k)
        cluster_points = points[cluster_mask]
        
        plt.plot(
            cluster_points[:, 0],
            cluster_points[:, 1],
            'o',
            markerfacecolor=tuple(col),
            markeredgecolor=tuple(col),
            markersize=6
        )
    
    plt.title(f'DBSCAN Clustering Results (ε={eps}, MinPts={min_samples})')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.grid(True)
    plt.savefig('dbscan_clusters.png')
    plt.close()
